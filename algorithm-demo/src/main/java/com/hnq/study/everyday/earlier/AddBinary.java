package com.hnq.study.everyday.earlier;

/**
 * 给你两个二进制字符串，返回它们的和（用二进制表示）。
 *
 * 输入为 非空 字符串且只包含数字1和0。
 *
 * 示例1:
 *
 * 输入: a = "11", b = "1"
 * 输出: "100"
 * 示例2:
 *
 * 输入: a = "1010", b = "1011"
 * 输出: "10101"
 * 
 * 提示：
 *
 * 每个字符串仅由字符 '0' 或 '1' 组成。
 * 1 <= a.length, b.length <= 10^4
 * 字符串如果不是 "0" ，就都不含前导零。
 *
 * @author henengqiang
 * @date 2021/07/13
 * @see <a href="https://leetcode-cn.com/problems/add-binary">链接</a>
 */
public class AddBinary {

    public static void main(String[] args) {
        System.out.println(addBinary2("0", "0"));
        System.out.println(addBinary2("0", "1"));
        System.out.println(addBinary2("1", "1"));
        System.out.println(addBinary2("11", "1"));
        System.out.println(addBinary2("1010", "1011"));
        System.out.println(addBinary
    }

    private static String addBinary(String a, String b) {
        // 2ms
        StringBuilder s = new StringBuilder();
        int i = a.length() - 1, j = b.length() - 1;
        boolean ca = false;
        while (i >= 0 || j >= 0) {
            if (i >= 0 && j >= 0) {
                int ss = (a.charAt(i--) - '0') + (b.charAt(j--) - '0') + (ca ? 1 : 0);
                ca = ss > 1;
                s.insert(0, ss > 1 ? (ss > 2 ? 1 : 0) : ss);
            } else if (i >= 0) {
                int ss = (a.charAt(i--) - '0') + (ca ? 1 : 0);
                ca = ss > 1;
                s.insert(0, ss > 1 ? 0 : ss);
            } else {
                int ss = (b.charAt(j--) - '0') + (ca ? 1 : 0);
                ca = ss > 1;
                s.insert(0, ss > 1 ? 0 : ss);
            }
        }
        return ca ? s.insert(0, 1).toString() : s.toString();
    }

    private static String addBinary2(String a, String b) {
        // 2ms
        if (a == null || a.length() == 0) {
            return b;
        }
        if (b == null || b.length() == 0) {
            return a;
        }
        StringBuilder stb = new StringBuilder();
        int i = a.length() - 1;
        int j = b.length() - 1;
        // 进位
        int ca = 0;
        while(i >= 0 || j >= 0) {
            if(i >= 0) {
                ca += a.charAt(i--) - '0';
            }
            if(j >= 0) {
                ca += b.charAt(j--) - '0';
            }
            stb.insert(0, ca % 2);
            ca >>= 1;
        }
        if (ca > 0) {
            stb.insert(0, 1);
        }
        return stb.toString();
    }

}
