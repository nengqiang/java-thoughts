package com.hnq.study.everyday.earlier;

/**
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
 *
 * 提示：
 * 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，
 * 并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的示例 3中，输入表示有符号整数 -3。
 *
 * 示例 1：
 * 输入：00000000000000000000000000001011
 * 输出：3
 * 解释：输入的二进制串 00000000000000000000000000001011中，共有三位为 '1'。
 *
 * 示例 2：
 * 输入：00000000000000000000000010000000
 * 输出：1
 * 解释：输入的二进制串 00000000000000000000000010000000中，共有一位为 '1'。
 *
 * 示例 3：
 * 输入：11111111111111111111111111111101
 * 输出：31
 * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
 *
 * 提示：
 * 输入必须是长度为 32 的 二进制串 。
 * 
 * 进阶：
 * 如果多次调用这个函数，你将如何优化你的算法？
 *
 * @author henengqiang
 * @date 2021/08/06
 * @see <a href="https://leetcode-cn.com/problems/number-of-1-bits"></a>
 */
public class HammingWeight {

    public static void main(String[] args) {
        System.out.println(hammingWeight(00000000000000000000000000001011));
        System.out.println(hammingWeight(00000000000000000000000010000000));
        System.out.println(hammingWeight(111));
    }

    private static int hammingWeight(int n) {
        // 0ms
        return Integer.bitCount(n);
    }

    /**
     *  0xaaaaaaaa = 10101010101010101010101010101010 (偶数位为1，奇数位为0）
     *  0x55555555 = 1010101010101010101010101010101 (偶数位为0，奇数位为1）
     *  0x33333333 = 110011001100110011001100110011 (1和0每隔两位交替出现)
     *  0xcccccccc = 11001100110011001100110011001100(0和1每隔两位交替出现)
     *  0x0f0f0f0f = 00001111000011110000111100001111 (1和0每隔四位交替出现)
     *  0xf0f0f0f0 = 11110000111100001111000011110000 (0和1每隔四位交替出现)
     * (num & 0x55555555) << 1)
     * ((x & 0x55555555) << 1 --- 奇数位移到偶数位 ((x >> 1) & 0x55555555); --- 先右移一位，等于拿到奇数位
     */
    private static int hammingWeight2(int n) {
        n = (n & 0x55555555) + ((n >> 1) & 0x55555555);
        n = (n & 0x33333333) + ((n >> 2) & 0x33333333);
        n = (n & 0x0f0f0f0f) + ((n >> 4) & 0x0f0f0f0f);
        n = (n & 0x00ff00ff) + ((n >> 8) & 0x00ff00ff);
        n = (n & 0x0000ffff) + ((n >> 16) & 0x0000ffff);
        return n;
    }

}





















